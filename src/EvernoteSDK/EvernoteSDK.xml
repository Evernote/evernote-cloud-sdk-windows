<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EvernoteSDK</name>
    </assembly>
    <members>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetSyncState">
            ** Asks the NoteStore to provide information about the status of the user account corresponding to the provided authentication token.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetSyncChunk(System.Int32,System.Int32,System.Boolean)">
            ** Asks the NoteStore to provide the state of the account in order of last modification.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetFilteredSyncChunk(System.Int32,System.Int32,Evernote.EDAM.NoteStore.SyncChunkFilter)">
            ** Asks the NoteStore to provide the state of the account in order of last modification.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetLinkedNotebookSyncState(Evernote.EDAM.Type.LinkedNotebook)">
            ** Asks the NoteStore to provide information about the status of a linked notebook that has been shared with the caller, or that is public to the world.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetLinkedNotebookSyncChunk(Evernote.EDAM.Type.LinkedNotebook,System.Int32,System.Int32,System.Boolean)">
            ** Asks the NoteStore to provide information about the contents of a linked notebook that has been shared with the caller, or that is public to the world.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.ListNotebooks">
            ** Returns a list of all of the notebooks in the account.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetNotebook(System.String)">
            ** Returns the current state of the notebook with the provided GUID. The notebook may be active or deleted (but not expunged).
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetDefaultNotebook">
            ** Returns the notebook that should be used to store new notes in the user's account when no other notebooks are specified.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.CreateNotebook(Evernote.EDAM.Type.Notebook)">
            ** Asks the service to make a notebook with the provided name.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.UpdateNotebook(Evernote.EDAM.Type.Notebook)">
            ** Submits notebook changes to the service. The provided data must include the notebook's guid field for identification.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.ExpungeNotebook(System.String)">
            ** Permanently removes the notebook from the user's account. After this action, the notebook is no longer available for undeletion, etc. If the notebook contains any Notes, they will be moved to the current default notebook and moved into the trash (i.e. Note.active=false).
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.ListTags">
            ** Returns a list of the tags in the account. Evernote does not support the undeletion of tags, so this will only include active tags.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.ListTagsByNotebook(System.String)">
            ** Returns a list of the tags that are applied to at least one note within the provided notebook. If the notebook is public, the authenticationToken may be ignored.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetTag(System.String)">
            ** Returns the current state of the Tag with the provided GUID.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.CreateTag(Evernote.EDAM.Type.Tag)">
            ** Asks the service to make a tag with a set of information.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.UpdateTag(Evernote.EDAM.Type.Tag)">
            ** Submits tag changes to the service. The provided data must include the tag's guid field for identification. The service will apply updates to the following tag fields: name, parentGuid
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.UntagAll(System.String)">
            ** Removes the provided tag from every note that is currently tagged with this tag. If this operation is successful, the tag will still be in the account, but it will not be tagged on any notes.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.ExpungeTag(System.String)">
            ** Permanently deletes the tag with the provided GUID, if present.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.ListSearches">
            ** Returns a list of the searches in the account. Evernote does not support the undeletion of searches, so this will only include active searches.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetSearch(System.String)">
            ** Returns the current state of the search with the provided GUID.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.CreateSearch(Evernote.EDAM.Type.SavedSearch)">
            ** Asks the service to make a saved search with a set of information.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.UpdateSearch(Evernote.EDAM.Type.SavedSearch)">
            ** Submits search changes to the service. The provided data must include the search's guid field for identification. The service will apply updates to the following search fields: name, query, and format.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.ExpungeSearch(System.String)">
            ** Permanently deletes the saved search with the provided GUID, if present.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.FindRelated(Evernote.EDAM.NoteStore.RelatedQuery,Evernote.EDAM.NoteStore.RelatedResultSpec)">
            ** Identify related entities on the service, such as notes, notebooks, and tags related to notes or content.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.FindNotes(Evernote.EDAM.NoteStore.NoteFilter,System.Int32,System.Int32)">
            ** Used to find a set of the notes from a user's account based on various criteria specified via a NoteFilter object.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.FindNoteOffset(Evernote.EDAM.NoteStore.NoteFilter,System.String)">
            ** Finds the position of a note within a sorted subset of all of the user's notes.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.FindNotesMetadata(Evernote.EDAM.NoteStore.NoteFilter,System.Int32,System.Int32,Evernote.EDAM.NoteStore.NotesMetadataResultSpec)">
            ** Used to find the high-level information about a set of the notes from a user's account based on various criteria specified via a NoteFilter object.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.FindNotesCount(Evernote.EDAM.NoteStore.NoteFilter,System.Boolean)">
            ** This function is used to determine how many notes are found for each notebook and tag in the user's account, given a current set of filter parameters that determine the current selection.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetNote(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            ** Returns the current state of the note in the service with the provided GUID. The ENML contents of the note will only be provided if the 'withContent' parameter is true.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetNoteApplicationData(System.String)">
            ** Get all of the application data for the note identified by GUID, with values returned within the LazyMap fullMap field.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetNoteApplicationDataEntry(System.String,System.String)">
            ** Get the value of a single entry in the applicationData map for the note identified by GUID.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.SetNoteApplicationDataEntry(System.String,System.String,System.String)">
            ** Update, or create, an entry in the applicationData map for the note identified by guid.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.UnsetNoteApplicationDataEntry(System.String,System.String)">
            ** Remove an entry identified by 'key' from the applicationData map for the note identified by 'guid'. Silently ignores an unset of a non-existing key.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetNoteContent(System.String)">
            ** Returns XHTML contents of the note with the provided GUID. If the Note is found in a public notebook, the authenticationToken will be ignored (so it could be an empty string).
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetNoteSearchText(System.String,System.Boolean,System.Boolean)">
            ** Returns a block of the extracted plain text contents of the note with the provided GUID.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetResourceSearchText(System.String)">
            ** Returns a block of the extracted plain text contents of the resource with the provided GUID.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetNoteTagNames(System.String)">
            ** Returns a list of the names of the tags for the note with the provided guid.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.CreateNote(Evernote.EDAM.Type.Note)">
            ** Asks the service to make a note with the provided set of information.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.UpdateNote(Evernote.EDAM.Type.Note)">
            ** Submit a set of changes to a note to the service.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.DeleteNote(System.String)">
            ** Moves the note into the trash. The note may still be undeleted, unless it is expunged.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.ExpungeNote(System.String)">
            ** Permanently removes a Note, and all of its Resources, from the service.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.ExpungeNotes(System.Collections.Generic.List{System.String})">
            ** Permanently removes a list of Notes, and all of their Resources, from the service.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.ExpungeInactiveNotes">
            ** Permanently removes all of the Notes that are currently marked as inactive.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.CopyNote(System.String,System.String)">
            ** Performs a deep copy of the Note with the provided GUID 'noteGuid' into the Notebook with the provided GUID 'toNotebookGuid'.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.ListNoteVersions(System.String)">
            ** Returns a list of the prior versions of a particular note that are saved within the service.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetNoteVersion(System.String,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            ** This can be used to retrieve a previous version of a Note after it has been updated within the service.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetResource(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            ** Returns the current state of the resource in the service with the provided GUID.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetResourceApplicationData(System.String)">
            ** Get all of the application data for the Resource identified by GUID, with values returned within the LazyMap fullMap field. If there are no applicationData entries, then a LazyMap with an empty fullMap will be returned. If your application only needs to fetch its own applicationData entry, use getResourceApplicationDataEntry instead.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetResourceApplicationDataEntry(System.String,System.String)">
            ** Get the value of a single entry in the applicationData map for the Resource identified by GUID.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.SetResourceApplicationDataEntry(System.String,System.String,System.String)">
            ** Update, or create, an entry in the applicationData map for the Resource identified by guid.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.UnsetResourceApplicationDataEntry(System.String,System.String)">
            ** Remove an entry identified by 'key' from the applicationData map for the Resource identified by 'guid'.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.UpdateResource(Evernote.EDAM.Type.Resource)">
            ** Submit a set of changes to a resource to the service.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetResourceData(System.String)">
            ** Returns binary data of the resource with the provided GUID.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetResourceByHash(System.String,System.Byte[],System.Boolean,System.Boolean,System.Boolean)">
            ** Returns the current state of a resource, referenced by containing note GUID and resource content hash.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetResourceRecognition(System.String)">
            ** Returns the binary contents of the recognition index for the resource with the provided GUID.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetResourceAlternateData(System.String)">
            ** If the Resource with the provided GUID has an alternate data representation (indicated via the Resource.alternateData field), then this request can be used to retrieve the binary contents of that alternate data file. If the caller asks about a resource that has no alternate data form, this will throw EDAMNotFoundException.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetResourceAttributes(System.String)">
            ** Returns the set of attributes for the Resource with the provided GUID. If the Resource is found in a public notebook, the authenticationToken will be ignored (so it could be an empty string).
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetPublicNotebook(System.Int32,System.String)">
            ** Looks for a user account with the provided userId on this NoteStore shard and determines whether that account contains a public notebook with the given URI.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.CreateSharedNotebook(Evernote.EDAM.Type.SharedNotebook)">
            ** Used to construct a shared notebook object. The constructed notebook will contain a "share key" which serve as a unique identifer and access token for a user to access the notebook of the shared notebook owner.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.SendMessageToSharedNotebookMembers(System.String,System.String,System.Collections.Generic.List{System.String})">
            ** Send a reminder message to some or all of the email addresses that a notebook has been shared with.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.ListSharedNotebooks">
            ** Lists the collection of shared notebooks for all notebooks in the users account.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.ExpungeSharedNotebooks(System.Collections.Generic.List{System.Int64})">
            ** Expunges the SharedNotebooks in the user's account using the SharedNotebook.id as the identifier.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.CreateLinkedNotebook(Evernote.EDAM.Type.LinkedNotebook)">
            ** Asks the service to make a linked notebook with the provided name, username of the owner and identifiers provided.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.UpdateLinkedNotebook(Evernote.EDAM.Type.LinkedNotebook)">
            ** Asks the service to update a linked notebook.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.ListLinkedNotebooks">
            ** Returns a list of linked notebooks
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.ExpungeLinkedNotebook(System.String)">
            ** Permanently expunges the linked notebook from the account.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.AuthenticateToSharedNotebook(System.String)">
            ** Asks the service to produce an authentication token that can be used to access the contents of a shared notebook from someone else's account.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.GetSharedNotebookByAuth">
            ** This function is used to retrieve extended information about a shared notebook by a guest who has already authenticated to access that notebook.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.EmailNote(Evernote.EDAM.NoteStore.NoteEmailParameters)">
            ** Attempts to send a single note to one or more email recipients.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.ShareNote(System.String)">
            ** If this note is not already shared (via its own direct URL), then this will start sharing that note.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.StopSharingNote(System.String)">
            ** If this note is not already shared then this will stop sharing that note and invalidate its "Note Key", so any existing URLs to access that Note will stop working. If the Note is not shared, then this function will do nothing.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.AuthenticateToSharedNote(System.String,System.String)">
            ** Asks the service to produce an authentication token that can be used to access the contents of a single Note which was individually shared from someone's account.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.UpdateSharedNotebook(Evernote.EDAM.Type.SharedNotebook)">
            ** Update a SharedNotebook object.
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteStoreClient.SetSharedNotebookRecipientSettings(System.Int64,Evernote.EDAM.Type.SharedNotebookRecipientSettings)">
            ** Set shared notebook recipient settings.
        </member>
        <member name="T:EvernoteSDK.Advanced.ENPreferencesStore">
            <summary>
            Preference store for Evernote SDK. 
            </summary>
        </member>
        <member name="P:EvernoteSDK.Advanced.ENSessionAdvanced.SharedSession">
            **
        </member>
        <member name="P:EvernoteSDK.Advanced.ENSessionAdvanced.PrimaryNoteStore">
            **
        </member>
        <member name="P:EvernoteSDK.Advanced.ENSessionAdvanced.BusinessNoteStore">
            **
        </member>
        <member name="M:EvernoteSDK.Advanced.ENSessionAdvanced.NoteStoreForLinkedNotebook(Evernote.EDAM.Type.LinkedNotebook)">
            **
        </member>
        <member name="M:EvernoteSDK.Advanced.ENSessionAdvanced.NoteStoreForNoteRef(EvernoteSDK.ENNoteRef)">
            **
        </member>
        <member name="M:EvernoteSDK.Advanced.ENSessionAdvanced.NoteStoreforNotebook(EvernoteSDK.ENNotebook)">
            **
        </member>
        <member name="P:EvernoteSDK.Advanced.ENSessionFindNotesResultAdvanced.UpdateSequenceNumber">
            **
        </member>
        <member name="P:EvernoteSDK.Advanced.ENNoteAdvanced.SourceUrl">
            **
        </member>
        <member name="P:EvernoteSDK.Advanced.ENNoteAdvanced.EdamAttributes">
            **
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteContentAdvanced.NoteContentWithENML(System.String)">
            **
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteContentAdvanced.#ctor(System.String)">
            **
        </member>
        <member name="M:EvernoteSDK.Advanced.ENNoteContentAdvanced.Enml">
            **
        </member>
        <member name="P:EvernoteSDK.Advanced.ENResourceAdvanced.SourceUrl">
            **
        </member>
        <member name="P:EvernoteSDK.Advanced.ENResourceAdvanced.DataHash">
            **
        </member>
        <member name="P:EvernoteSDK.Advanced.ENNoteRefAdvanced.Guid">
            **
        </member>
        <member name="P:EvernoteSDK.Advanced.ENNotebookAdvanced.Guid">
            **
        </member>
        <member name="M:EvernoteSDK.ENUnknownException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:EvernoteSDK.ENUnknownException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:EvernoteSDK.ENUnknownException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the
            current exception, or a null reference if no inner exception is
            specified</param>
        </member>
        <member name="M:EvernoteSDK.ENConnectionFailedException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:EvernoteSDK.ENConnectionFailedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:EvernoteSDK.ENConnectionFailedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the
            current exception, or a null reference if no inner exception is
            specified</param>
        </member>
        <member name="M:EvernoteSDK.ENAuthExpiredException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:EvernoteSDK.ENAuthExpiredException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:EvernoteSDK.ENAuthExpiredException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the
            current exception, or a null reference if no inner exception is
            specified</param>
        </member>
        <member name="M:EvernoteSDK.ENInvalidDataException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:EvernoteSDK.ENInvalidDataException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:EvernoteSDK.ENInvalidDataException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the
            current exception, or a null reference if no inner exception is
            specified</param>
        </member>
        <member name="M:EvernoteSDK.ENNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:EvernoteSDK.ENNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:EvernoteSDK.ENNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the
            current exception, or a null reference if no inner exception is
            specified</param>
        </member>
        <member name="M:EvernoteSDK.ENPermissionDeniedException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:EvernoteSDK.ENPermissionDeniedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:EvernoteSDK.ENPermissionDeniedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the
            current exception, or a null reference if no inner exception is
            specified</param>
        </member>
        <member name="M:EvernoteSDK.ENLimitReachedException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:EvernoteSDK.ENLimitReachedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:EvernoteSDK.ENLimitReachedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the
            current exception, or a null reference if no inner exception is
            specified</param>
        </member>
        <member name="M:EvernoteSDK.ENQuotaReachedException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:EvernoteSDK.ENQuotaReachedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:EvernoteSDK.ENQuotaReachedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the
            current exception, or a null reference if no inner exception is
            specified</param>
        </member>
        <member name="M:EvernoteSDK.ENDataConflictException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:EvernoteSDK.ENDataConflictException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:EvernoteSDK.ENDataConflictException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the
            current exception, or a null reference if no inner exception is
            specified</param>
        </member>
        <member name="M:EvernoteSDK.ENENMLInvalidException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:EvernoteSDK.ENENMLInvalidException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:EvernoteSDK.ENENMLInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the
            current exception, or a null reference if no inner exception is
            specified</param>
        </member>
        <member name="M:EvernoteSDK.ENRateLimitReachedException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:EvernoteSDK.ENRateLimitReachedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:EvernoteSDK.ENRateLimitReachedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the
            current exception, or a null reference if no inner exception is
            specified</param>
        </member>
        <member name="M:EvernoteSDK.ENCancelledException.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="M:EvernoteSDK.ENCancelledException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with the specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:EvernoteSDK.ENCancelledException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the class with the specified error message
            and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the
            current exception, or a null reference if no inner exception is
            specified</param>
        </member>
        <member name="M:EvernoteSDK.ENSession.SetSharedSessionConsumerKey(System.String,System.String,System.String)">
            **
        </member>
        <member name="M:EvernoteSDK.ENSession.SetSharedSessionDeveloperToken(System.String,System.String)">
            **
        </member>
        <member name="F:EvernoteSDK.ENSession._sharedSession">
            **
        </member>
        <member name="T:EvernoteSDK.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:EvernoteSDK.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:EvernoteSDK.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="M:EvernoteSDK.ENHTMLtoENMLConverter.ResolveCSSLinks(System.String,System.String)">
            <summary>
            Replaces any &lt;link rel="stylesheet"&gt; tags with the actual css source.
            </summary>
            <param name="html">The html to be converted</param>
            <param name="baseUrl">In case the links are relative, this specifies their base url</param>
            <returns></returns>
        </member>
    </members>
</doc>
